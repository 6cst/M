import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import cross_val_score, cross_val_predict
from sklearn.datasets import fetch_openml
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Step 1: Load MNIST Dataset
mnist_digits = fetch_openml('mnist_784', version=1)

# Extract data and target
x = mnist_digits["data"]
y = mnist_digits["target"].astype(int)  # Convert target to integers

# Visualize some sample digits
sample_a_img = x.loc[200].to_numpy().reshape(28, 28)
sample_b_img = x.loc[25].to_numpy().reshape(28, 28)

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.title("Sample A")
plt.imshow(sample_a_img, cmap="gray")
plt.axis("off")

plt.subplot(1, 2, 2)
plt.title("Sample B")
plt.imshow(sample_b_img, cmap="gray")
plt.axis("off")

plt.show()

# Step 2: Split the Data
x_train, x_test, y_train, y_test = x[:60000], x[60000:], y[:60000], y[60000:]

# Step 3: Train SGD Classifier
model = SGDClassifier(random_state=42)
model.fit(x_train, y_train)

# Step 4: Predictions and Evaluation
# Predict on the test set
y_pred = model.predict(x_test)

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")

# Precision, Recall, F1-Score
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Step 5: Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 8))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="coolwarm", xticklabels=range(10), yticklabels=range(10))
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("True")
plt.show()

# Step 6: Cross-Validation
cv_scores = cross_val_score(model, x_test, y_test, cv=5, scoring="accuracy")
print(f"Cross-Validation Accuracy Scores: {cv_scores}")
print(f"Mean CV Accuracy: {np.mean(cv_scores):.4f}")

# Cross-Validation Predictions
cv_pred = cross_val_predict(model, x_test, y_test, cv=5)
cv_conf_matrix = confusion_matrix(y_test, cv_pred)
plt.figure(figsize=(10, 8))
sns.heatmap(cv_conf_matrix, annot=True, fmt="d", cmap="coolwarm", xticklabels=range(10), yticklabels=range(10))
plt.title("CV Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("True")
plt.show()
# Predict a specific sample and name it
sample_index = 100  # Example index to test
sample_image = x_test.iloc[sample_index].to_numpy().reshape(28, 28)
predicted_digit = model.predict([x_test.iloc[sample_index]])

# Display the sample image
plt.figure(figsize=(5, 5))
plt.imshow(sample_image, cmap="gray")
plt.axis("off")
plt.title(f"Predicted: This is the digit {predicted_digit[0]}")
plt.show()

# Optionally test on multiple samples
sample_indices = [100, 58, 150]  # Example indices to test
for idx in sample_indices:
    img = x_test.iloc[idx].to_numpy().reshape(28, 28)
    prediction = model.predict([x_test.iloc[idx]])
    print(f"Sample Index: {idx}, Predicted Digit: {prediction[0]}")
    plt.figure(figsize=(3, 3))
    plt.imshow(img, cmap="gray")
    plt.title(f"This is the digit {prediction[0]}")
    plt.axis("off")
    plt.show()
